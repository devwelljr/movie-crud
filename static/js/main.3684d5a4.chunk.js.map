{"version":3,"sources":["services/movieData.js","services/movieAPI.js","components/Loading.js","components/MovieForm.js","components/MovieCard.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["movies","id","title","subtitle","storyline","rating","imagePath","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","movie","find","mov","parseInt","Promise","resolve","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","Loading","Component","MovieForm","props","state","handleSubmit","bind","onSubmit","this","field","newValue","setState","htmlFor","placeholder","type","className","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","src","alt","to","MovieDetails","deleteMovie","filter","status","movieAPI","match","params","shouldRedirect","loading","fetchMovie","a","MovieList","showMovies","fetch","NewMovie","EditMovie","fetchMovieUpdate","NotFound","App","exact","path","component","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3684d5a4.chunk.js","sourcesContent":["const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'https://upload.wikimedia.org/wikipedia/pt/7/74/Kingsglaive_Final_Fantasy_XV.png',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'http://roksolana-pleshkanovska.de/wp-content/uploads/2015/01/final_fantasy.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'https://br.web.img3.acsta.net/c_310_420/pictures/17/03/21/15/39/179516.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'https://www.filmmusicsite.com/pt/images/covers/large/31037.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'https://images-na.ssl-images-amazon.com/images/I/91lF%2BK1jhbL._AC_SX466_.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <h2 id=\"loading\">Carregando...</h2>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport './MovieForm.css';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div id=\"titulo\">\n        <label htmlFor=\"movie_title\">\n          Título:\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div id=\"subtitulo\">\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo:\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div id=\"imagePath\" className=\"row\">\n        <label htmlFor=\"movie_image\">\n          Imagem:\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div id=\"sinopse\">\n        <label htmlFor=\"movie_storyline\">\n          Sinopse:\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div id=\"genero\">\n        <label htmlFor=\"movie_genre\">\n          Gênero:\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div id=\"nota\">\n        <label htmlFor=\"movie_rating\">\n          Avaliação:\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div id=\"divFormulario\">\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func,\n  movie: PropTypes.object,\n}.isRequired;\n\nexport default MovieForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, storyline, id, imagePath } = movie;\n\n    return (\n      <div data-testid=\"movie-card\" className=\"card\">\n        <section className=\"sectionImage\">\n          <img\n            className=\"sectionImage\"\n            src={ imagePath }\n            alt={ `Capa do filme ${title}` }\n          />\n        </section>\n        <section>\n          <h1>{ title }</h1>\n        </section>\n        <section>\n          <h5>{ storyline }</h5>\n        </section>\n        <p><Link to={ `/movies/${id}` }>VER DETALHES</Link></p>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.objectOf({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n  }),\n}.isRequired;\n\nexport default MovieCard;\n","import React, { Component } from 'react';\nimport './MovieDetails.css';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      movie: {},\n      shouldRedirect: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  deleteMovie = () => {\n    const { match: { params: { id } } } = this.props;\n    movieAPI.deleteMovie(id);\n    this.setState({ shouldRedirect: true });\n  }\n\n  async fetchMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    this.setState({ loading: false, movie });\n  }\n\n  render() {\n    const { movie, loading, shouldRedirect } = this.state;\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = movie;\n\n    if (loading) return <Loading />;\n\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n\n    return (\n      <div data-testid=\"movie-details\" className=\"movieDetails\">\n        <img className=\"divImage\" alt=\"Movie Cover\" src={ imagePath } />\n        <h1>{ title }</h1>\n        <p>{ `Subtitle: ${subtitle}` }</p>\n        <p>{ `Storyline: ${storyline}` }</p>\n        <p>{ `Genre: ${genre}` }</p>\n        <p>{ `Rating: ${rating}` }</p>\n        <div className=\"divLinks\">\n          <Link to={ `/movies/${id}/edit` }>EDITAR</Link>\n          <Link to=\"/\">VOLTAR</Link>\n          <Link to=\"/\" onClick={ this.deleteMovie }>DELETAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  storyline: PropTypes.string,\n  genre: PropTypes.string,\n  rating: PropTypes.number,\n  id: PropTypes.number,\n}.isRequired;\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.showMovies();\n  }\n\n  async showMovies() {\n    const fetch = await movieAPI.getMovies();\n    this.setState({ movies: fetch, loading: false });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"divList\">\n        {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    await movieAPI.createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loading: true,\n      movie: {},\n      shouldRedirect: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovieUpdate();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  async fetchMovieUpdate() {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    this.setState({ loading: false, movie });\n  }\n\n  render() {\n    const { loading, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/\" />;\n    }\n\n    if (loading) return <Loading />;\n\n    return (\n      <div data-testid=\"edit-movie\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  id: PropTypes.number,\n}.isRequired;\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\nimport MovieDetails from './pages/MovieDetails';\nimport MovieList from './pages/MovieList';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <header>\n        <h1 id=\"title\">Movie Card Library CRUD</h1>\n        <Link to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </header>\n      <Switch>\n        <Route exact path=\"/movie-crud.github.io\" component={ MovieList } />\n        <Route exact path=\"/\" component={ MovieList } />\n        <Route path=\"/movies/new\" component={ NewMovie } />\n        <Route\n          exact\n          path=\"/movies/:id\"\n          render={ (props) => <MovieDetails { ...props } /> }\n        />\n        <Route\n          exact\n          path=\"/movies/:id/edit\"\n          render={ (props) => <EditMovie { ...props } /> }\n        />\n        <Route path=\"\" component={ NotFound } />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}